"use strict";function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol==="undefined"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function(){};return{s:F,n:function n(){if(i>=o.length)return{done:!0};return{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=!0,didErr=!1,err;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();normalCompletion=step.done;return step},e:function e(_e2){didErr=!0;err=_e2},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}/**
 * KK Cabinets
 * @copyright 2020 Luke Zhang, Ethan Lim
 * @author luke zhang, Ethan Lim
 * 
 * https://luke-zhang-04.github.io
 * https://github.com/ethanlim04
 * 
 * @license
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */var data=new Map;var columnNum=0;var columns=$("#row").find(".responsive_column");var imgURL;var storageRef=storage.ref("countertops");function contains(target,array){var _iterator=_createForOfIteratorHelper(array),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){i=_step.value;if(target===i){return!0}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return!1}function arrayRemove(arr,value){return arr.filter(function(ele){return ele!==value})}db.collection("countertops").get().then(function(snapshot){snapshot.docs.forEach(function(doc){data[doc.id]=doc.data()});display_batch(data)});function display_batch(data){var _loop=function(key){imgURL=storageRef.child(data[key]["file"]);var column=columns[columnNum%4];var id=key;imgURL.getDownloadURL().then(function(url){$(column).append("<div class=\"image_container\" id="+id+"><img onclick=\"expand("+id+")\"src=\""+url+"\"/></div>");var element=$("#"+id);element.append("<div class=\"details\"><p>"+data[id]["caption"]+"<p></div>")});columnNum++};for(var key in data){_loop(key)}$("#loading").css("display","none")}function expand(key){var element=document.getElementById(key);var container=element.getElementsByClassName("details")[0];if(container.style.maxHeight){container.style.maxHeight=null}else{container.style.maxHeight=container.scrollHeight+"px"}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3VudGVydG9wcy5qcyJdLCJuYW1lcyI6WyJkYXRhIiwiTWFwIiwiY29sdW1uTnVtIiwiY29sdW1ucyIsIiQiLCJmaW5kIiwiaW1nVVJMIiwic3RvcmFnZVJlZiIsInN0b3JhZ2UiLCJyZWYiLCJjb250YWlucyIsInRhcmdldCIsImFycmF5IiwiaSIsImFycmF5UmVtb3ZlIiwiYXJyIiwidmFsdWUiLCJmaWx0ZXIiLCJlbGUiLCJkYiIsImNvbGxlY3Rpb24iLCJnZXQiLCJ0aGVuIiwic25hcHNob3QiLCJkb2NzIiwiZm9yRWFjaCIsImRvYyIsImlkIiwiZGlzcGxheV9iYXRjaCIsImtleSIsImNoaWxkIiwiY29sdW1uIiwiZ2V0RG93bmxvYWRVUkwiLCJ1cmwiLCJhcHBlbmQiLCJlbGVtZW50IiwiY3NzIiwiZXhwYW5kIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbnRhaW5lciIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzdHlsZSIsIm1heEhlaWdodCIsInNjcm9sbEhlaWdodCJdLCJtYXBwaW5ncyI6ImcyQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJBLEdBQUlBLENBQUFBLElBQUksQ0FBRyxHQUFJQyxDQUFBQSxHQUFmLENBQ0EsR0FBSUMsQ0FBQUEsU0FBUyxDQUFHLENBQWhCLENBQ0EsR0FBSUMsQ0FBQUEsT0FBTyxDQUFHQyxDQUFDLENBQUMsTUFBRCxDQUFELENBQVVDLElBQVYsQ0FBZSxvQkFBZixDQUFkLENBQ0EsR0FBSUMsQ0FBQUEsTUFBSixDQUNBLEdBQUlDLENBQUFBLFVBQVUsQ0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVksYUFBWixDQUFqQixDQUdBLFFBQVNDLENBQUFBLFFBQVQsQ0FBa0JDLE1BQWxCLENBQTBCQyxLQUExQixDQUFpQywwQ0FDbkJBLEtBRG1CLFlBQzdCLCtDQUFpQixDQUFaQyxDQUFZLGFBQ2IsR0FBSUYsTUFBTSxHQUFLRSxDQUFmLENBQWtCLENBQ2QsUUFDSCxDQUNKLENBTDRCLG1EQU03QixRQUNILENBR0QsUUFBU0MsQ0FBQUEsV0FBVCxDQUFxQkMsR0FBckIsQ0FBMEJDLEtBQTFCLENBQWlDLENBQzdCLE1BQU9ELENBQUFBLEdBQUcsQ0FBQ0UsTUFBSixDQUFXLFNBQVNDLEdBQVQsQ0FBYSxDQUMzQixNQUFPQSxDQUFBQSxHQUFHLEdBQUtGLEtBQ2xCLENBRk0sQ0FHVixDQUdERyxFQUFFLENBQUNDLFVBQUgsQ0FBYyxhQUFkLEVBQTZCQyxHQUE3QixHQUFtQ0MsSUFBbkMsQ0FBd0MsU0FBQ0MsUUFBRCxDQUFjLENBQ2xEQSxRQUFRLENBQUNDLElBQVQsQ0FBY0MsT0FBZCxDQUFzQixTQUFBQyxHQUFHLENBQUksQ0FDekIxQixJQUFJLENBQUMwQixHQUFHLENBQUNDLEVBQUwsQ0FBSixDQUFlRCxHQUFHLENBQUMxQixJQUFKLEVBQ2xCLENBRkQsRUFHQTRCLGFBQWEsQ0FBQzVCLElBQUQsQ0FDaEIsQ0FMRCxFQVFBLFFBQVM0QixDQUFBQSxhQUFULENBQXVCNUIsSUFBdkIsQ0FBNkIsb0JBQ2hCNkIsR0FEZ0IsRUFFckJ2QixNQUFNLENBQUdDLFVBQVUsQ0FBQ3VCLEtBQVgsQ0FBaUI5QixJQUFJLENBQUM2QixHQUFELENBQUosQ0FBVSxNQUFWLENBQWpCLENBQVQsQ0FDQSxHQUFJRSxDQUFBQSxNQUFNLENBQUc1QixPQUFPLENBQUNELFNBQVMsQ0FBQyxDQUFYLENBQXBCLENBQ0EsR0FBSXlCLENBQUFBLEVBQUUsQ0FBR0UsR0FBVCxDQUNBdkIsTUFBTSxDQUFDMEIsY0FBUCxHQUF3QlYsSUFBeEIsQ0FBNkIsU0FBU1csR0FBVCxDQUFjLENBRXZDN0IsQ0FBQyxDQUFDMkIsTUFBRCxDQUFELENBQVVHLE1BQVYsQ0FDSSxxQ0FBdUNQLEVBQXZDLENBQTRDLHlCQUE1QyxDQUF3RUEsRUFBeEUsQ0FBNkUsV0FBN0UsQ0FBMEZNLEdBQTFGLENBQWdHLFlBRHBHLEVBS0EsR0FBSUUsQ0FBQUEsT0FBTyxDQUFHL0IsQ0FBQyxDQUFDLElBQU11QixFQUFQLENBQWYsQ0FHQVEsT0FBTyxDQUFDRCxNQUFSLENBQ0ksNkJBQStCbEMsSUFBSSxDQUFDMkIsRUFBRCxDQUFKLENBQVMsU0FBVCxDQUEvQixDQUFxRCxXQUR6RCxDQUdILENBYkQsRUFjQXpCLFNBQVMsRUFuQlksRUFDekIsSUFBSyxHQUFJMkIsQ0FBQUEsR0FBVCxHQUFnQjdCLENBQUFBLElBQWhCLENBQXNCLE9BQWI2QixHQUFhLENBbUJyQixDQUVEekIsQ0FBQyxDQUFDLFVBQUQsQ0FBRCxDQUFjZ0MsR0FBZCxDQUFrQixTQUFsQixDQUE2QixNQUE3QixDQUNILENBR0QsUUFBU0MsQ0FBQUEsTUFBVCxDQUFnQlIsR0FBaEIsQ0FBcUIsQ0FDakIsR0FBSU0sQ0FBQUEsT0FBTyxDQUFHRyxRQUFRLENBQUNDLGNBQVQsQ0FBd0JWLEdBQXhCLENBQWQsQ0FDQSxHQUFJVyxDQUFBQSxTQUFTLENBQUdMLE9BQU8sQ0FBQ00sc0JBQVIsQ0FBK0IsU0FBL0IsRUFBMEMsQ0FBMUMsQ0FBaEIsQ0FDQSxHQUFJRCxTQUFTLENBQUNFLEtBQVYsQ0FBZ0JDLFNBQXBCLENBQThCLENBQzFCSCxTQUFTLENBQUNFLEtBQVYsQ0FBZ0JDLFNBQWhCLENBQTRCLElBQy9CLENBRkQsSUFFTyxDQUNISCxTQUFTLENBQUNFLEtBQVYsQ0FBZ0JDLFNBQWhCLENBQTRCSCxTQUFTLENBQUNJLFlBQVYsQ0FBeUIsSUFDeEQsQ0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogS0sgQ2FiaW5ldHNcbiAqIEBjb3B5cmlnaHQgMjAyMCBMdWtlIFpoYW5nLCBFdGhhbiBMaW1cbiAqIEBhdXRob3IgbHVrZSB6aGFuZywgRXRoYW4gTGltXG4gKiBcbiAqIGh0dHBzOi8vbHVrZS16aGFuZy0wNC5naXRodWIuaW9cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhhbmxpbTA0XG4gKiBcbiAqIEBsaWNlbnNlXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICogXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICogXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxubGV0IGRhdGEgPSBuZXcgTWFwXG5sZXQgY29sdW1uTnVtID0gMFxubGV0IGNvbHVtbnMgPSAkKFwiI3Jvd1wiKS5maW5kKFwiLnJlc3BvbnNpdmVfY29sdW1uXCIpXG5sZXQgaW1nVVJMXG5sZXQgc3RvcmFnZVJlZiA9IHN0b3JhZ2UucmVmKFwiY291bnRlcnRvcHNcIilcblxuLy9pZiBhcnJheSBjb25haW5zIHRhcmdldFxuZnVuY3Rpb24gY29udGFpbnModGFyZ2V0LCBhcnJheSkge1xuICAgIGZvciAoaSBvZiBhcnJheSkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuXG4vL3JlbW92ZSBlbGVtZW50IGZyb20gYXJyYXlcbmZ1bmN0aW9uIGFycmF5UmVtb3ZlKGFyciwgdmFsdWUpIHtcbiAgICByZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbihlbGUpe1xuICAgICAgICByZXR1cm4gZWxlICE9PSB2YWx1ZVxuICAgIH0pXG59XG5cbi8vZ2V0IGNvdW50ZXJ0b3BzIGZyb20gZmlyZXN0b3JlXG5kYi5jb2xsZWN0aW9uKFwiY291bnRlcnRvcHNcIikuZ2V0KCkudGhlbigoc25hcHNob3QpID0+IHtcbiAgICBzbmFwc2hvdC5kb2NzLmZvckVhY2goZG9jID0+IHtcbiAgICAgICAgZGF0YVtkb2MuaWRdID0gZG9jLmRhdGEoKVxuICAgIH0pXG4gICAgZGlzcGxheV9iYXRjaChkYXRhKVxufSlcblxuLy9oYW5kbGUgZGF0YSBhbmQgZGlzcGxheSBpbWFnZXMgYWNjb3JkaW5nbHlcbmZ1bmN0aW9uIGRpc3BsYXlfYmF0Y2goZGF0YSkge1xuICAgIGZvciAobGV0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgIGltZ1VSTCA9IHN0b3JhZ2VSZWYuY2hpbGQoZGF0YVtrZXldW1wiZmlsZVwiXSkgLy9pbWFnZSB1cmxcbiAgICAgICAgbGV0IGNvbHVtbiA9IGNvbHVtbnNbY29sdW1uTnVtJTRdIC8vY29sdW1uIHRvIGFwcGVuZCBpbWFnZSB0b1xuICAgICAgICBsZXQgaWQgPSBrZXkgLy9mb3IgYXN5bmNocm9udXMgZ2V0RG93bmxvYWRVUkxcbiAgICAgICAgaW1nVVJMLmdldERvd25sb2FkVVJMKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIC8vYXBwZW5kIGltYWdlIHRvIGNvbHVtblxuICAgICAgICAgICAgJChjb2x1bW4pLmFwcGVuZCggXG4gICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPVxcXCJpbWFnZV9jb250YWluZXJcXFwiIGlkPVwiICsgaWQgKyBcIj48aW1nIG9uY2xpY2s9XFxcImV4cGFuZChcIiArIGlkICsgXCIpXFxcInNyYz1cXFwiXCIrIHVybCArIFwiXFxcIi8+PC9kaXY+XCJcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgLy9hdHRhY2ggaW5mb3JtYXRpb24gdG8gaW1hZ2VcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gJChcIiNcIiArIGlkKSAvL3Nob3J0Y3V0IGZvciB0YXJnZXQgZWxlbWVudFxuXG4gICAgICAgICAgICAvL2FwcGVuZCBpbmZvcm1hdGlvbiB0byBlbGVtZW50XG4gICAgICAgICAgICBlbGVtZW50LmFwcGVuZChcbiAgICAgICAgICAgICAgICBcIjxkaXYgY2xhc3M9XFxcImRldGFpbHNcXFwiPjxwPlwiICsgZGF0YVtpZF1bXCJjYXB0aW9uXCJdICsgXCI8cD48L2Rpdj5cIlxuICAgICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgICBjb2x1bW5OdW0rK1xuICAgIH1cbiAgICAvL3JlbW92ZSBsb2FkaW5nIGdpZlxuICAgICQoXCIjbG9hZGluZ1wiKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxufVxuXG4vL21ha2VzIGluZm9ybWF0aW9uIGRyb3AgZG93blxuZnVuY3Rpb24gZXhwYW5kKGtleSkge1xuICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoa2V5KVxuICAgIGxldCBjb250YWluZXIgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkZXRhaWxzXCIpWzBdXG4gICAgaWYgKGNvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQpe1xuICAgICAgICBjb250YWluZXIuc3R5bGUubWF4SGVpZ2h0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXIuc3R5bGUubWF4SGVpZ2h0ID0gY29udGFpbmVyLnNjcm9sbEhlaWdodCArIFwicHhcIjtcbiAgICB9XG59Il19
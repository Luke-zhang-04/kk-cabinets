"use strict";function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=!0;var _d=!1;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=!0){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=!0;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol==="undefined"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function(){};return{s:F,n:function n(){if(i>=o.length)return{done:!0};return{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=!0,didErr=!1,err;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();normalCompletion=step.done;return step},e:function e(_e3){didErr=!0;err=_e3},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}var storageRef=storage.ref("gallery");firebase.auth().onAuthStateChanged(function(user){if(user){get_recommendations(user)}});function get_recommendations(user){var recommended=new Map;var rated=new Map;firebase.database().ref("/users/"+user.uid+"/predicted").once("value").then(function(snapshot){var _iterator=_createForOfIteratorHelper(snapshot.val().entries()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2);index=_step$value[0];elem=_step$value[1];if(!Number.isInteger(elem)&&elem>=5){recommended[index]=elem}else if(Number.isInteger&&elem>=7){rated[index]=elem}}}catch(err){_iterator.e(err)}finally{_iterator.f()}}).then(function(){display_setup(recommended,"recon");display_setup(rated,"rated")}).then(function(){document.getElementById("loading").style.display="none"})}function display_setup(data,config){var allData=new Map;db.collection("gallery").get().then(function(snapshot){snapshot.docs.forEach(function(doc){allData[doc.id]=doc.data()})}).then(function(){display_batch(data,allData,config)})}function display_batch(data,allData,row){var columns=document.getElementById(row).getElementsByClassName("responsive_column");var columnNum=0;var _loop=function(key){var imgURL=storageRef.child(allData[key]["file"]);var column=columns[columnNum%4];var id=key;imgURL.getDownloadURL().then(function(url){column.insertAdjacentHTML("beforeend","<div class=\"image_container\" id="+id+"><img onclick=\"expand("+id+")\"src=\""+url+"\"/></div>");var element=document.getElementById(id);var info="<br/>Colour: "+allData[id]["details"]["colour"].charAt(0).toUpperCase()+allData[id]["details"]["colour"].slice(1)+"<br/>Furniture: ";if(allData[id]["details"]["furniture"]["countertop"]&&allData[id]["details"]["furniture"]["cabinet"]){info+="Countertop and Cabinets "}else if(allData[id]["details"]["furniture"]["cabinet"]){info+="Cabinets"}else if(allData[id]["details"]["furniture"]["countertop"]){info+="Countertop"}info+="<br/>Location: "+allData[id]["details"]["location"].charAt(0).toUpperCase()+allData[id]["details"]["location"].slice(1);info+="<br/>Material: "+allData[id]["details"]["material"].charAt(0).toUpperCase()+allData[id]["details"]["material"].slice(1);info+="<br/>Pattern: "+(allData[id]["details"]["pattern"]?"Yes":"None");if(row=="recon"){info+="<br/>Estimated rating: "+data[id]}else if(row=="rated"){info+="<br/>Your rating: "+data[id]}element.insertAdjacentHTML("beforeend","<div class=\"details\"><p>"+info+"<p>")});columnNum++};for(var key in data){_loop(key)}if(Object.keys(data).length==0){if(row=="recon"){var header=document.getElementById("reconHeader");header.insertAdjacentHTML("afterend","<p class=\"noDisplay\">It looks like we couldn't get you a suitable recommendation. Please rate more items or wait as the program could still be processing your ratings.</p>")}else if(row=="rated"){var _header=document.getElementById("ratedHeader");_header.insertAdjacentHTML("afterend","<p class=\"noDisplay\">It looks like you haven't rated anything highly yet. Please rate more items. </p>")}}}function expand(key){var element=document.getElementById(key);var container=element.getElementsByClassName("details")[0];if(container.style.maxHeight){container.style.maxHeight=null}else{container.style.maxHeight=container.scrollHeight+"px"}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
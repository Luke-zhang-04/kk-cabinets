/**
 * KK Cabinets
 * @copyright (C) 2020 Luke Zhang, Ethan Lim
 * 
 * @author Luke Zhang, Ethan Lim
 * 
 * https://luke-zhang-04.github.io/
 * https://github.com/ethanlim04
 * 
 * @license GPL-3.0
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
"use strict";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0})}else{obj[key]=value}return obj}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=!0;var _d=!1;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=!0){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=!0;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol==="undefined"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function(){};return{s:F,n:function n(){if(i>=o.length)return{done:!0};return{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=!0,didErr=!1,err;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();normalCompletion=step.done;return step},e:function e(_e3){didErr=!0;err=_e3},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}var data=new Map;var columnNum=0;var columns=$("#row").find(".responsive_column");var imgURL;var storageRef=storage.ref("gallery");var asyncFinished=!1;var filterOptions={colours:[],materials:[],furniture:["cabinets","countertop"],pattern:null,locations:[]};var activeFilters={colours:[],materials:[],cabinets:null,countertop:null,pattern:null,locations:[]};function contains(target,array){var _iterator=_createForOfIteratorHelper(array),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var i=_step.value;if(target===i){return!0}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return!1}function arrayRemove(arr,value){return arr.filter(function(ele){return ele!=value})}db.collection("gallery").get().then(function(snapshot){var infoTypes=["colour","material","location"];snapshot.docs.forEach(function(doc){data[doc.id]=doc.data();var details=doc.data().details;var _iterator2=_createForOfIteratorHelper(infoTypes),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var infoType=_step2.value;if(!contains(details[infoType],filterOptions[infoType+"s"])){filterOptions[infoType+"s"].push(details[infoType])}}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}});var _iterator3=_createForOfIteratorHelper(infoTypes.entries()),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _step3$value=_slicedToArray(_step3.value,2),count=_step3$value[0],infoType=_step3$value[1];var _iterator4=_createForOfIteratorHelper(filterOptions[infoType+"s"]),_step4;try{var _loop=function(){var info=_step4.value;var id=info+"_"+infoType;$("#filter"+count).append("<button class=\"dropdown_menu\" id="+id+">"+info+"<span style=\"float: right;\" class=\"material-icons\">done</span></button>");var filter_name=info;var filter_type=infoType;if(id.includes(" ")){id="mixed_"+infoType}$("#"+id).click(function(){if(!contains(filter_name,activeFilters[filter_type+"s"])){activeFilters[filter_type+"s"].push(filter_name);$(this).find("span").text("clear")}else{activeFilters[filter_type+"s"]=arrayRemove(activeFilters[filter_type+"s"],filter_name);$(this).find("span").text("done")}})};for(_iterator4.s();!(_step4=_iterator4.n()).done;){_loop()}}catch(err){_iterator4.e(err)}finally{_iterator4.f()}}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}display_batch(data)});function display_batch(data){asyncFinished=!1;var _loop2=function(key){imgURL=storageRef.child(data[key]["file"]);var column=columns[columnNum%4];var id=key;imgURL.getDownloadURL().then(function(url){$(column).append("<div class=\"image_container\" id="+id+"><img onclick=\"expand("+id+")\"src=\""+url+"\"/></div>");var element=$("#"+id);var info="<br/>Colour: "+data[id]["details"]["colour"].charAt(0).toUpperCase()+data[id]["details"]["colour"].slice(1)+"<br/>Furniture: ";if(data[id]["details"]["furniture"]["countertop"]&&data[id]["details"]["furniture"]["cabinet"]){info+="Countertop and Cabinets "}else if(data[id]["details"]["furniture"]["cabinet"]){info+="Cabinets"}else if(data[id]["details"]["furniture"]["countertop"]){info+="Countertop"}info+="<br/>Location: "+data[id]["details"]["location"].charAt(0).toUpperCase()+data[id]["details"]["location"].slice(1);info+="<br/>Material: "+data[id]["details"]["material"].charAt(0).toUpperCase()+data[id]["details"]["material"].slice(1);info+="<br/>Pattern: "+(data[id]["details"]["pattern"]?"Yes":"None");element.append("<div class=\"details\"><p>"+info+"<p>")});columnNum++};for(var key in data){_loop2(key)}Promise.all(columns).then(function(){$("#loading").css("display","none")})}function expand(key){var element=document.getElementById(key);var container=element.getElementsByClassName("details")[0];if(container.style.maxHeight){container.style.maxHeight=null}else{container.style.maxHeight=container.scrollHeight+"px"}}function expand_filter(numb){var element=document.getElementById("filter"+numb);if(element.style.maxHeight){element.style.maxHeight=null}else{element.style.maxHeight=element.scrollHeight+"px"}}function apply_filters(){var filterTypes=["colour","material","location"];$(".image_container").remove();$("#loading").css("display","block");var filteredData=new Map;for(var key in data){var doc=data[key];var broken=!1;var _iterator5=_createForOfIteratorHelper(filterTypes),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var filter=_step5.value;if(contains(doc["details"][filter],activeFilters[filter+"s"])){broken=!0;break}}}catch(err){_iterator5.e(err)}finally{_iterator5.f()}if(activeFilters["pattern"]!==null&&doc["details"]["pattern"]!==activeFilters["pattern"]){broken=!0}if(activeFilters["countertop"]!==null&&activeFilters["cabinets"]!==null){var match=doc["details"]["furniture"]["countertop"]!==activeFilters["countertop"]||doc["details"]["furniture"]["cabinet"]!==activeFilters["cabinets"];if(match){broken=!0}}if(!broken){filteredData[key]=doc}}display_batch(filteredData)}function clear_filters(){$(".image_container").remove();$("#loading").css("display","block");$(".dropdown_menu").each(function(){if($(this).find("span").text()=="clear"){$(this).find("span").text("done")}});$("#pattern_toggle").find("span").text("remove");activeFilters={colours:[],materials:[],cabinets:null,countertop:null,pattern:null,locations:[]};display_batch(data)}$("document").ready(function(){$("#pattern_toggle").click(function(){if($(this).find("span").text()==="remove"){$(this).find("span").text("clear");activeFilters["pattern"]=!1}else if($(this).find("span").text()==="clear"){$(this).find("span").text("done");activeFilters["pattern"]=!0}else if($(this).find("span").text()==="done"){$(this).find("span").text("remove");activeFilters["pattern"]=null}});var furniture_dropdowns=["either","both","countertop","cabinets"];$(".furniture_dropdown").each(function(){$(this).click(function(){var _iterator6=_createForOfIteratorHelper(furniture_dropdowns),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var i=_step6.value;$("#"+i+"_furniture").find("span").text("")}}catch(err){_iterator6.e(err)}finally{_iterator6.f()}$(this).find("span").text("done");var id=$(this).attr("id");id=id.replace("_furniture","");if(id==="both"){activeFilters["cabinets"]=!0;activeFilters["countertop"]=!0}else if(id==="either"){activeFilters["cabinets"]=null;activeFilters["countertop"]=null}else if(id==="countertop"){activeFilters["cabinets"]=!1;activeFilters["countertop"]=!0}else if(id==="cabinets"){activeFilters["cabinets"]=!0;activeFilters["countertop"]=!1}})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

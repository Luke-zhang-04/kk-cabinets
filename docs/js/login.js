"use strict";var state="login";var provider=new firebase.auth.GoogleAuthProvider;var windowWidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;firebase.auth().onAuthStateChanged(function(user){if(user){}});function googleSignin(){var err=!1;firebase.auth().signInWithPopup(provider).then(function(result){result.credential.accessToken;result.user})["catch"](function(error){var errorCode=error.code;var errorMessage=error.message;window.alert("ERROR! Code: "+errorCode+"\nInfo: "+errorMessage);err=!0}).then(function(){firebase.auth().onAuthStateChanged(function(user){if(user&&!err){var userId=firebase.auth().currentUser.uid;firebase.database().ref("/users/"+userId).once("value").then(function(snapshot){if(!snapshot.exists()){var _user=firebase.auth().currentUser;createNewUser(_user.uid,_user.email)}window.location.href="/"})}})})}function showRegister(){state="register";if(windowWidth>=768){document.getElementById("to_login").style.display="block";document.getElementById("to_register").style.display="none";document.getElementById("login").style.display="none";document.getElementById("register").style.display="block"}else{document.getElementById("to_login_mobile").style.display="block";document.getElementById("to_register_mobile").style.display="none";document.getElementById("login").style.display="none";document.getElementById("register").style.display="block"}}function showLogin(){state="login";if(windowWidth>=768){document.getElementById("to_register").style.display="block";document.getElementById("to_login").style.display="none";document.getElementById("register").style.display="none";document.getElementById("login").style.display="block"}else{document.getElementById("to_register_mobile").style.display="block";document.getElementById("to_login_mobile").style.display="none";document.getElementById("register").style.display="none";document.getElementById("login").style.display="block"}}function register(email,password,password2){var err=!1;if(password===password2){firebase.auth().createUserWithEmailAndPassword(email,password)["catch"](function(error){var errorCode=error.code;var errorMessage=error.message;window.alert("ERROR! Code: "+errorCode+"\nInfo: "+errorMessage);showRegister();err=!0})}else{window.alert("ERROR! Passwords do not match.");err=!0}if(!err){firebase.auth().onAuthStateChanged(function(user){if(user){user.sendEmailVerification().then(function(){window.alert("Success! An email has been sent to "+email+" Please confirm your email to access all features.");showLogin();window.location.href="/"})["catch"](function(error){var errorCode=error.code;var errorMessage=error.message;window.alert("ERROR! Code: "+errorCode+"\nInfo: "+errorMessage)});createNewUser(user.uid,user.email)}})}}function createNewUser(userId,email){firebase.database().ref("users/"+userId).set({uid:userId,email:email,ratings:{}})}function logout(){firebase.auth().signOut()}function login(email,password){var err=!1;firebase.auth().signInWithEmailAndPassword(email,password)["catch"](function(error){var errorCode=error.code;var errorMessage=error.message;window.alert("ERROR! Code: "+errorCode+"\nInfo: "+errorMessage);err=!0}).then(function(){if(!err){window.location.href="/"}})}function main(){Array.from(document.getElementsByClassName("switchButton")).forEach(function(self){self.addEventListener("click",function(){if(state==="login"){showRegister()}else{showLogin()}})});document.getElementById("register_button").addEventListener("click",function(){var info=[document.getElementById("register_email").value,document.getElementById("register_password").value,document.getElementById("register_password_confirm").value];register.apply(void 0,info)});document.getElementById("login_button").addEventListener("click",function(){var info=[document.getElementById("login_email").value,document.getElementById("login_password").value];login.apply(void 0,info)});document.getElementById("login_google").addEventListener("click",function(){googleSignin()});document.getElementById("register_password_confirm").addEventListener("keydown",function(event){if(event.keyCode===13){event.preventDefault();document.getElementById("register_button").click()}});document.getElementById("login_password").addEventListener("keydown",function(event){if(event.keyCode===13){event.preventDefault();document.getElementById("login_button").click()}});if(windowWidth<768){document.getElementsByClassName("authChange")[0].style.display="none";document.getElementById("mobileAuthChange").style.display="block"}}main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
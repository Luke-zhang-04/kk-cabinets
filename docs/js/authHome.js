"use strict";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0})}else{obj[key]=value}return obj}/**
 * KK Cabinets
 * @copyright 2020 Luke Zhang, Ethan Lim
 * @author luke zhang, Ethan Lim
 * 
 * https://luke-zhang-04.github.io
 * https://github.com/ethanlim04
 * 
 * @license
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */var toggleSwitch;function logout(){firebase.auth().signOut()}firebase.auth().onAuthStateChanged(function(user){toggleSwitch=document.getElementById("navbarLogin");if(user){toggleSwitch.innerHTML="Logout";toggleSwitch.addEventListener("click",logout);toggleSwitch.setAttribute("href","#");document.getElementById("navbarRecommend").style.display="block";var login;firebase.database().ref("logged-in/").once("value").then(function(snapshot){login=snapshot.val()}).then(function(){if(!login){login=new Map}login[user.uid]=Date.now();firebase.database().ref("logged-in").set(_objectSpread({},login))})}else{toggleSwitch.innerHTML="Login/Register";toggleSwitch.removeEventListener("click",logout);toggleSwitch.setAttribute("href","login");document.getElementById("navbarRecommend").style.display="none"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoSG9tZS5qcyJdLCJuYW1lcyI6WyJ0b2dnbGVTd2l0Y2giLCJsb2dvdXQiLCJmaXJlYmFzZSIsImF1dGgiLCJzaWduT3V0Iiwib25BdXRoU3RhdGVDaGFuZ2VkIiwidXNlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJkaXNwbGF5IiwibG9naW4iLCJkYXRhYmFzZSIsInJlZiIsIm9uY2UiLCJ0aGVuIiwic25hcHNob3QiLCJ2YWwiLCJNYXAiLCJ1aWQiLCJEYXRlIiwibm93Iiwic2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IjI4QkFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJBLEdBQUlBLENBQUFBLFlBQUosQ0FFQSxRQUFTQyxDQUFBQSxNQUFULEVBQWtCLENBQ2RDLFFBQVEsQ0FBQ0MsSUFBVCxHQUFnQkMsT0FBaEIsRUFFSCxDQUVERixRQUFRLENBQUNDLElBQVQsR0FBZ0JFLGtCQUFoQixDQUFtQyxTQUFTQyxJQUFULENBQWUsQ0FDOUNOLFlBQVksQ0FBR08sUUFBUSxDQUFDQyxjQUFULENBQXdCLGFBQXhCLENBQWYsQ0FDQSxHQUFJRixJQUFKLENBQVUsQ0FFTk4sWUFBWSxDQUFDUyxTQUFiLENBQXlCLFFBQXpCLENBQ0FULFlBQVksQ0FBQ1UsZ0JBQWIsQ0FBOEIsT0FBOUIsQ0FBdUNULE1BQXZDLEVBQ0FELFlBQVksQ0FBQ1csWUFBYixDQUEwQixNQUExQixDQUFrQyxHQUFsQyxFQUVBSixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsaUJBQXhCLEVBQTJDSSxLQUEzQyxDQUFpREMsT0FBakQsQ0FBMkQsT0FBM0QsQ0FJQSxHQUFJQyxDQUFBQSxLQUFKLENBQ0FaLFFBQVEsQ0FBQ2EsUUFBVCxHQUFvQkMsR0FBcEIsQ0FBd0IsWUFBeEIsRUFBc0NDLElBQXRDLENBQTJDLE9BQTNDLEVBQW9EQyxJQUFwRCxDQUF5RCxTQUFTQyxRQUFULENBQW1CLENBQ3hFTCxLQUFLLENBQUdLLFFBQVEsQ0FBQ0MsR0FBVCxFQUNYLENBRkQsRUFFR0YsSUFGSCxDQUVRLFVBQUssQ0FDVCxHQUFJLENBQUNKLEtBQUwsQ0FBWSxDQUNSQSxLQUFLLENBQUcsR0FBSU8sQ0FBQUEsR0FDZixDQUNEUCxLQUFLLENBQUNSLElBQUksQ0FBQ2dCLEdBQU4sQ0FBTCxDQUFrQkMsSUFBSSxDQUFDQyxHQUFMLEVBQWxCLENBQ0F0QixRQUFRLENBQUNhLFFBQVQsR0FBb0JDLEdBQXBCLENBQXdCLFdBQXhCLEVBQXFDUyxHQUFyQyxrQkFDT1gsS0FEUCxFQUdILENBVkQsQ0FZSCxDQXZCRCxJQXVCTyxDQUVIZCxZQUFZLENBQUNTLFNBQWIsQ0FBeUIsZ0JBQXpCLENBQ0FULFlBQVksQ0FBQzBCLG1CQUFiLENBQWlDLE9BQWpDLENBQTBDekIsTUFBMUMsRUFDQUQsWUFBWSxDQUFDVyxZQUFiLENBQTBCLE1BQTFCLENBQWtDLE9BQWxDLEVBRUFKLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixpQkFBeEIsRUFBMkNJLEtBQTNDLENBQWlEQyxPQUFqRCxDQUEyRCxNQUM5RCxDQUNKLENBakNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBLSyBDYWJpbmV0c1xuICogQGNvcHlyaWdodCAyMDIwIEx1a2UgWmhhbmcsIEV0aGFuIExpbVxuICogQGF1dGhvciBsdWtlIHpoYW5nLCBFdGhhbiBMaW1cbiAqIFxuICogaHR0cHM6Ly9sdWtlLXpoYW5nLTA0LmdpdGh1Yi5pb1xuICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGFubGltMDRcbiAqIFxuICogQGxpY2Vuc2VcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKiBcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKiBcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG5sZXQgdG9nZ2xlU3dpdGNoXG5cbmZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpXG4gICAgY29uc29sZS5sb2coXCJTdWNlc3NmdWxseSBMb2dnZWQgT3V0XCIpXG59XG5cbmZpcmViYXNlLmF1dGgoKS5vbkF1dGhTdGF0ZUNoYW5nZWQoZnVuY3Rpb24odXNlcikge1xuICAgIHRvZ2dsZVN3aXRjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmF2YmFyTG9naW5cIilcbiAgICBpZiAodXNlcikge1xuXG4gICAgICAgIHRvZ2dsZVN3aXRjaC5pbm5lckhUTUwgPSBcIkxvZ291dFwiXG4gICAgICAgIHRvZ2dsZVN3aXRjaC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbG9nb3V0KVxuICAgICAgICB0b2dnbGVTd2l0Y2guc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcIiNcIilcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hdmJhclJlY29tbWVuZFwiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiXG5cbiAgICAgICAgY29uc29sZS5sb2codXNlciwgdXNlci5wcm92aWRlckRhdGEpXG5cbiAgICAgICAgbGV0IGxvZ2luXG4gICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKFwibG9nZ2VkLWluL1wiKS5vbmNlKFwidmFsdWVcIikudGhlbihmdW5jdGlvbihzbmFwc2hvdCkge1xuICAgICAgICAgICAgbG9naW4gPSBzbmFwc2hvdC52YWwoKVxuICAgICAgICB9KS50aGVuKF8gPT4ge1xuICAgICAgICAgICAgaWYgKCFsb2dpbikge1xuICAgICAgICAgICAgICAgIGxvZ2luID0gbmV3IE1hcCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dpblt1c2VyLnVpZF0gPSBEYXRlLm5vdygpXG4gICAgICAgICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZihcImxvZ2dlZC1pblwiKS5zZXQoeyAvL3B1c2ggdG8gZGF0YWJhc2VcbiAgICAgICAgICAgICAgICAuLi5sb2dpblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gdXNlciBzaWduZWQgaW5cIilcbiAgICAgICAgdG9nZ2xlU3dpdGNoLmlubmVySFRNTCA9IFwiTG9naW4vUmVnaXN0ZXJcIlxuICAgICAgICB0b2dnbGVTd2l0Y2gucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGxvZ291dClcbiAgICAgICAgdG9nZ2xlU3dpdGNoLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgXCJsb2dpblwiKVxuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmF2YmFyUmVjb21tZW5kXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgIH1cbn0pIl19